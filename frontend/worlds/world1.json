{
  "meta": {
    "title": "World 1: Python Basics",
    "intro": "Printing, comments, variables, core data types, operators, basic collections, and first control flow."
  },
  "lessons": {
    "print": {
      "title": "Printing output",
      "html": "<p><code>print()</code> sends text/values to the console. It converts arguments to strings and joins them with spaces.</p><pre><code>print('Hello', 3)  # Hello 3\nname = 'Rix'\nprint(f'Hi, {name}!')</code></pre>"
    },
    "comments": {
      "title": "Comments",
      "html": "<p>Use <code>#</code> for single-line comments. Everything after <code>#</code> on that line is ignored by Python.</p><pre><code># this is a comment\nx = 5  # trailing comment</code></pre>"
    },
    "variables": {
      "title": "Variables",
      "html": "<p>No declaration step. Assignment uses <code>=</code>. Names are case-sensitive.</p><pre><code>x = 5\nName = 'Rix'  # Name != name</code></pre>"
    },
    "strings": {
      "title": "Strings",
      "html": "<p>Strings are immutable. Use quotes and <code>+</code> to concatenate; <code>f''</code> for interpolation.</p><pre><code>s = 'Py' + 'thon'\nf = f'Len={len(s)}'</code></pre>"
    },
    "list": {
      "title": "Lists",
      "html": "<p>Ordered, mutable collections.</p><pre><code>L = [1,2,3]\nL.append(4)\nL[0] = 9</code></pre>"
    },
    "tuple": {
      "title": "Tuples",
      "html": "<p>Ordered, immutable. One-item tuple needs a trailing comma.</p><pre><code>t = (1,2)\none = (1,)</code></pre>"
    },
    "set": {
      "title": "Sets",
      "html": "<p>Unordered collection of unique items; supports math operations.</p><pre><code>a = {1,2,2,3}   # {1,2,3}\na | {3,4}       # union\na & {2,5}       # intersection</code></pre>"
    },
    "dict": {
      "title": "Dictionaries",
      "html": "<p>Key→value mapping.</p><pre><code>d = {'a':1}\nd['b'] = 2\nval = d.get('x', 0)</code></pre>"
    },
    "operators": {
      "title": "Operators",
      "html": "<p><code>**</code> power, <code>//</code> floor division, <code>%</code> remainder.</p><pre><code>3**2  # 9\n7//2  # 3\n7%3   # 1</code></pre>"
    },
    "logic": {
      "title": "Booleans & logic",
      "html": "<p>Truthiness: <code>0</code>, <code>''</code>, <code>[]</code>, <code>None</code> are False. <code>and</code>, <code>or</code>, <code>not</code>.</p><pre><code>bool('hi')  # True\nnot True    # False</code></pre>"
    },
    "if": {
      "title": "If / elif / else",
      "html": "<p>Colon + indentation form blocks.</p><pre><code>x = 3\nif x > 0:\n    print('pos')\nelif x == 0:\n    print('zero')\nelse:\n    print('neg')</code></pre>"
    },
    "loop": {
      "title": "For loops",
      "html": "<p>Iterate over items.</p><pre><code>for x in [1,2,3]:\n    print(x)</code></pre>"
    },
    "while": {
      "title": "While loop",
      "html": "<p>Runs while condition stays True. Use <code>break</code>/<code>continue</code>.</p><pre><code>i = 0\nwhile i < 3:\n    print(i)\n    i += 1</code></pre>"
    },
    "fstring": {
      "title": "f-strings",
      "html": "<p>Prefix string with <code>f</code> and interpolate variables with <code>{}</code>.</p><pre><code>name = 'Rix'\nprint(f'Hi {name}!')</code></pre>"
    },
    "slicing": {
      "title": "Slicing",
      "html": "<p><code>seq[start:stop:step]</code> (stop exclusive). Negative index counts from end.</p><pre><code>L = [0,1,2,3,4]\nL[:3]   # [0,1,2]\nL[-1]   # 4</code></pre>"
    },
    "comprehension": {
      "title": "Comprehensions",
      "html": "<p>Compact loops for lists/sets/dicts.</p><pre><code>[i*i for i in range(5) if i%2==0]</code></pre>"
    },
    "function": {
      "title": "Functions",
      "html": "<p>Define with <code>def</code>. Defaults after non-defaults.</p><pre><code>def f(x, y=2):\n    return x + y</code></pre>"
    },
    "scope": {
      "title": "Scope basics",
      "html": "<p>Assignment inside a function makes a name local unless declared <code>global</code>/<code>nonlocal</code>.</p><pre><code>x = 1\n\ndef bad():\n    x = x + 1  # UnboundLocalError</code></pre>"
    },
    "lambda": {
      "title": "Lambda",
      "html": "<p>Small anonymous function.</p><pre><code>square = lambda n: n*n\nsquare(3)  # 9</code></pre>"
    },
    "with": {
      "title": "Context manager",
      "html": "<p>Use <code>with</code> to acquire/release resources safely.</p><pre><code>with open('file.txt') as f:\n    data = f.read()</code></pre>"
    },
    "join": {
      "title": "String join",
      "html": "<p><code>sep.join(list)</code> joins items with separator.</p><pre><code>\"-\".join(['a','b','c'])  # 'a-b-c'</code></pre>"
    },
    "genexpr": {
      "title": "Generator expressions",
      "html": "<p>Like list comps but lazy (use parentheses).</p><pre><code>g = (i*i for i in range(3))\nnext(g)  # 0</code></pre>"
    },
    "context": {
      "title": "Context dunders",
      "html": "<p>Managers implement <code>__enter__</code> / <code>__exit__</code>.</p><pre><code>class CM:\n    def __enter__(self): ...\n    def __exit__(self, exc_type, exc, tb): ...</code></pre>"
    }
  },
  "questions": {
    "simple": [
      { "id": "w1-s-01", "type": "mcq", "topic": "print", "question": "How do you print Hello?", "options": ["echo('Hello')", "print('Hello')", "printf('Hello')"], "answer": "print('Hello')", "feedback": { "correct": "✅ Use print(...).", "wrong": "❌ Python uses print('Hello')." } },
      { "id": "w1-s-02", "type": "truefalse", "topic": "comments", "question": "# starts a single-line comment.", "answer": "True", "feedback": { "correct": "✅ Lines after # are ignored.", "wrong": "❌ In Python, # marks a comment." } },
      { "id": "w1-s-03", "type": "fill", "topic": "variables", "question": "Assign 5 to x:", "answer": "x = 5", "feedback": { "correct": "✅ Assignment uses '='.", "wrong": "❌ Write exactly: x = 5" } },
      { "id": "w1-s-04", "type": "mcq", "topic": "types", "question": "Type of 3.0?", "options": ["int", "float", "str"], "answer": "float", "feedback": { "correct": "✅ 3.0 is float.", "wrong": "❌ 3.0 isn’t int." } },
      { "id": "w1-s-05", "type": "fill", "topic": "strings", "question": "Concatenate 'Py' and 'thon':", "answer": "'Py' + 'thon'", "feedback": { "correct": "✅ '+' concatenates strings.", "wrong": "❌ Use '+', not commas." } },
      { "id": "w1-s-06", "type": "mcq", "topic": "list", "question": "Create a list of 1,2,3", "options": ["(1,2,3)", "[1,2,3]", "{1,2,3}"], "answer": "[1,2,3]", "feedback": { "correct": "✅ [] is list.", "wrong": "❌ () is tuple; {} is set/dict." } },
      { "id": "w1-s-07", "type": "mcq", "topic": "tuple", "question": "One-item tuple literal:", "options": ["(1)", "(1,)", "[1]"], "answer": "(1,)", "feedback": { "correct": "✅ The comma makes it tuple.", "wrong": "❌ (1) is just 1." } },
      { "id": "w1-s-08", "type": "truefalse", "topic": "set", "question": "Sets remove duplicates automatically.", "answer": "True", "feedback": { "correct": "✅ Sets keep unique items.", "wrong": "❌ Duplicates are dropped." } },
      { "id": "w1-s-09", "type": "fill", "topic": "dict", "question": "Create dict mapping a→1:", "answer": "{'a':1}", "feedback": { "correct": "✅ Use {'key': value}.", "wrong": "❌ Quote the key." } },
      { "id": "w1-s-10", "type": "mcq", "topic": "operators", "question": "3**2 equals:", "options": ["5", "6", "9"], "answer": "9", "feedback": { "correct": "✅ ** is exponentiation.", "wrong": "❌ * multiplies, ** powers." } },
      { "id": "w1-s-11", "type": "truefalse", "topic": "logic", "question": "and returns True only if both operands are True.", "answer": "True", "feedback": { "correct": "✅ That's AND.", "wrong": "❌ Review boolean logic." } },
      { "id": "w1-s-12", "type": "fill", "topic": "if", "question": "Print OK when x>0 (exact 2 lines):", "answer": "if x>0:\n    print('OK')", "feedback": { "correct": "✅ Colon + indent.", "wrong": "❌ Include ':' and indent." } },
      { "id": "w1-s-13", "type": "mcq", "topic": "loop", "question": "Loop over [1,2,3]", "options": ["for x from [1,2,3]:", "for x in [1,2,3]:", "foreach x [1,2,3]:"], "answer": "for x in [1,2,3]:", "feedback": { "correct": "✅ Use 'for x in ...'.", "wrong": "❌ Other languages use different forms." } },
      { "id": "w1-s-14", "type": "truefalse", "topic": "while", "question": "while runs while the condition remains True.", "answer": "True", "feedback": { "correct": "✅ Yes.", "wrong": "❌ That’s the point of while." } },
      { "id": "w1-s-15", "type": "fill", "topic": "fstring", "question": "f-string to show x=3:", "answer": "f'x={x}'", "feedback": { "correct": "✅ f-strings use {}.", "wrong": "❌ Add leading f and braces." } },
      { "id": "w1-s-16", "type": "mcq", "topic": "logic", "question": "bool(0) is?", "options": ["True", "False"], "answer": "False", "feedback": { "correct": "✅ 0 is falsy.", "wrong": "❌ 0 → False." } },
      { "id": "w1-s-17", "type": "mcq", "topic": "logic", "question": "bool('') is?", "options": ["True", "False"], "answer": "False", "feedback": { "correct": "✅ Empty string is falsy.", "wrong": "❌ Only non-empty is True." } },
      { "id": "w1-s-18", "type": "fill", "topic": "operators", "question": "7//2 equals:", "answer": "3", "feedback": { "correct": "✅ Floor division.", "wrong": "❌ Expect 3, not 3.5." } },
      { "id": "w1-s-19", "type": "fill", "topic": "operators", "question": "7%3 equals:", "answer": "1", "feedback": { "correct": "✅ Remainder is 1.", "wrong": "❌ 7 = 2*3 + 1." } },
      { "id": "w1-s-20", "type": "truefalse", "topic": "range", "question": "range(3) produces 0,1,2.", "answer": "True", "feedback": { "correct": "✅ Stop is excluded.", "wrong": "❌ It stops before 3." } },
      { "id": "w1-s-21", "type": "fill", "topic": "strings", "question": "len('abc') = ?", "answer": "3", "feedback": { "correct": "✅ 3 chars.", "wrong": "❌ Count 'a','b','c'." } },
      { "id": "w1-s-22", "type": "mcq", "topic": "strings", "question": "Index of 'b' in 'abc'?", "options": ["0", "1", "2"], "answer": "1", "feedback": { "correct": "✅ 0-based indexing.", "wrong": "❌ 'a'=0." } },
      { "id": "w1-s-23", "type": "fill", "topic": "slicing", "question": "'hello'[:2] gives?", "answer": "'he'", "feedback": { "correct": "✅ First two chars.", "wrong": "❌ [:2] means up to 2." } },
      { "id": "w1-s-24", "type": "truefalse", "topic": "strings", "question": "Strings are immutable.", "answer": "True", "feedback": { "correct": "✅ Can't modify in-place.", "wrong": "❌ Strings cannot change." } },
      { "id": "w1-s-25", "type": "mcq", "topic": "types", "question": "type([]) is?", "options": ["list", "tuple", "set"], "answer": "list", "feedback": { "correct": "✅ [] gives list.", "wrong": "❌ That's a list." } }
    ],
    "medium": [
      { "id": "w1-m-01", "type": "fill", "topic": "slicing", "question": "Last item of L:", "answer": "L[-1]", "feedback": { "correct": "✅ -1 indexes last.", "wrong": "❌ Use L[-1]." } },
      { "id": "w1-m-02", "type": "mcq", "topic": "list", "question": "Remove last element of L:", "options": ["L.pop()", "L.remove()", "del L"], "answer": "L.pop()", "feedback": { "correct": "✅ pop removes last.", "wrong": "❌ remove needs the value." } },
      { "id": "w1-m-03", "type": "fill", "topic": "dict", "question": "Get keys of dict d:", "answer": "d.keys()", "feedback": { "correct": "✅ .keys() returns a view.", "wrong": "❌ Use d.keys()." } },
      { "id": "w1-m-04", "type": "mcq", "topic": "set", "question": "Intersection of a and b?", "options": ["a|b", "a&b", "a-b"], "answer": "a&b", "feedback": { "correct": "✅ & is intersection.", "wrong": "❌ | is union." } },
      { "id": "w1-m-05", "type": "fill", "topic": "comprehension", "question": "Evens 0..5 with list comp:", "answer": "[i for i in range(6) if i%2==0]", "feedback": { "correct": "✅ Comp + filter.", "wrong": "❌ Add if clause." } },
      { "id": "w1-m-06", "type": "mcq", "topic": "function", "question": "Return multiple values:", "options": ["tuple", "list", "dict"], "answer": "tuple", "feedback": { "correct": "✅ Returns a tuple.", "wrong": "❌ Multiple return packs tuple." } },
      { "id": "w1-m-07", "type": "fill", "topic": "lambda", "question": "Anonymous function to add 1:", "answer": "lambda x: x+1", "feedback": { "correct": "✅ lambda x: x+1", "wrong": "❌ Syntax: lambda p: expr." } },
      { "id": "w1-m-08", "type": "debug", "topic": "scope", "question": "What error is raised?", "options": ["NameError", "UnboundLocalError", "TypeError"], "answer": "UnboundLocalError", "code": "x = 1\n\ndef f():\n    x = x + 1\n    return x", "feedback": { "correct": "✅ Local assignment shadows global.", "wrong": "❌ Referenced before assignment." } },
      { "id": "w1-m-09", "type": "mcq", "topic": "loop", "question": "Which breaks the loop early?", "options": ["continue", "break", "pass"], "answer": "break", "feedback": { "correct": "✅ break exits loop.", "wrong": "❌ continue skips iteration." } },
      { "id": "w1-m-10", "type": "fill", "topic": "range", "question": "range(2,5) expands to:", "answer": "2,3,4", "feedback": { "correct": "✅ Stop excluded.", "wrong": "❌ 5 is not included." } },
      { "id": "w1-m-11", "type": "mcq", "topic": "logic", "question": "not True is?", "options": ["True", "False"], "answer": "False", "feedback": { "correct": "✅ not flips boolean.", "wrong": "❌ True → False." } },
      { "id": "w1-m-12", "type": "fill", "topic": "strings", "question": "'abc'.upper() = ?", "answer": "'ABC'", "feedback": { "correct": "✅ Uppercase.", "wrong": "❌ Case mismatch." } },
      { "id": "w1-m-13", "type": "mcq", "topic": "strings", "question": "'a' in 'cat'?", "options": ["True", "False"], "answer": "True", "feedback": { "correct": "✅ It's present.", "wrong": "❌ 'a' is in 'cat'." } },
      { "id": "w1-m-14", "type": "truefalse", "topic": "logic", "question": "None is falsy.", "answer": "True", "feedback": { "correct": "✅ None behaves like False.", "wrong": "❌ None is not True." } },
      { "id": "w1-m-15", "type": "fill", "topic": "join", "question": "Join ['a','b'] with ',' → 'a,b':", "answer": "','.join(['a','b'])", "feedback": { "correct": "✅ sep.join(list).", "wrong": "❌ Use ','.join(list)." } }
    ],
    "hard": [
      { "id": "w1-h-01", "type": "puzzle", "topic": "loop", "question": "Order lines to print 0..2:", "choices": ["for i in range(3):", "    print(i)"], "answer": ["for i in range(3):", "    print(i)"], "feedback": { "correct": "✅ Header then indented body.", "wrong": "❌ Indent print under loop." } },
      { "id": "w1-h-02", "type": "puzzle", "topic": "function", "question": "Order to define and call function:", "choices": ["def greet(n):", "    return 'Hi '+n", "print(greet('Rix'))"], "answer": ["def greet(n):", "    return 'Hi '+n", "print(greet('Rix'))"], "feedback": { "correct": "✅ Define → return → call.", "wrong": "❌ Must define before call." } },
      { "id": "w1-h-03", "type": "puzzle", "topic": "if", "question": "Reorder to print 'OK' if x>10:", "choices": ["if x>10:", "    print('OK')"], "answer": ["if x>10:", "    print('OK')"], "feedback": { "correct": "✅ Condition then block.", "wrong": "❌ Keep indentation." } },
      { "id": "w1-h-04", "type": "fill", "topic": "lambda", "question": "Lambda to square n:", "answer": "lambda n: n*n", "feedback": { "correct": "✅ Short anonymous func.", "wrong": "❌ Syntax: lambda n: n*n" } },
      { "id": "w1-h-05", "type": "mcq", "topic": "context", "question": "Which dunder pair defines a context manager?", "options": ["__enter__/__exit__", "__open__/__close__", "__with__"], "answer": "__enter__/__exit__", "feedback": { "correct": "✅ with uses enter/exit.", "wrong": "❌ __with__ isn't real." } },
      { "id": "w1-h-06", "type": "debug", "topic": "exceptions", "question": "What's wrong here?", "options": ["Bare except too broad", "Fine", "NameError"], "answer": "Bare except too broad", "code": "try:\n    risky()\nexcept:\n    pass", "feedback": { "correct": "✅ Catch specific exceptions.", "wrong": "❌ Bare except hides bugs." } },
      { "id": "w1-h-07", "type": "fill", "topic": "genexpr", "question": "Generator for squares 0..2:", "answer": "(i*i for i in range(3))", "feedback": { "correct": "✅ () makes generator.", "wrong": "❌ Use parentheses." } },
      { "id": "w1-h-08", "type": "puzzle", "topic": "loop", "question": "Arrange to sum numbers 0..2:", "choices": ["s=0", "for i in range(3):", "    s+=i", "print(s)"], "answer": ["s=0", "for i in range(3):", "    s+=i", "print(s)"], "feedback": { "correct": "✅ Init → loop → add → print.", "wrong": "❌ Wrong order." } },
      { "id": "w1-h-09", "type": "fill", "topic": "with", "question": "Open file f.txt for read with context:", "answer": "with open('f.txt') as f:", "feedback": { "correct": "✅ Auto-closes file.", "wrong": "❌ Use with open(...) as ..." } },
      { "id": "w1-h-10", "type": "truefalse", "topic": "strings", "question": "The expression 'hi' + 3 raises a TypeError.", "answer": "True", "feedback": { "correct": "✅ Can't add str and int.", "wrong": "❌ Convert number first or use f-strings." } }
    ]
  }
}

