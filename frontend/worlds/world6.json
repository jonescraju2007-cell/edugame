{
  "meta": {
    "title": "World 6: Modules, Files & Errors",
    "intro": "Learn imports & packages, virtual environments, pip basics, file paths & I/O (text/binary), CSV/JSON, pathlib, context managers, exceptions (try/except/else/finally), raising & custom errors, assertions, logging, and common OS utilities."
  },
  "lessons": {
    "modules": {
      "title": "Python modules",
      "html": "<p>A module is a <code>.py</code> file. Run as script or import elsewhere. The module name becomes its namespace.</p><pre><code># mymod.py\ndef add(a,b): return a+b</code></pre>"
    },
    "import": {
      "title": "import / from ... import",
      "html": "<p><code>import pkg.mod</code> binds a name; <code>from pkg.mod import name</code> pulls a symbol into current namespace; <code>as</code> renames.</p>"
    },
    "packages": {
      "title": "Packages",
      "html": "<p>Folders with Python modules. Modern Python doesn’t require <code>__init__.py</code> for namespace packages, but it's common.</p>"
    },
    "venv": {
      "title": "Virtual environments",
      "html": "<p>Isolate dependencies.</p><pre><code>python -m venv .venv\nsource .venv/bin/activate  # Linux/macOS\n.venv\\Scripts\\activate    # Windows</code></pre>"
    },
    "pip": {
      "title": "pip basics",
      "html": "<p>Install packages into the active environment.</p><pre><code>python -m pip install requests\npython -m pip freeze > requirements.txt</code></pre>"
    },
    "paths": {
      "title": "Paths (os.path & pathlib)",
      "html": "<p>Prefer <code>pathlib.Path</code> for clean path handling.</p><pre><code>from pathlib import Path\np = Path('data/file.txt')\nprint(p.parent, p.name)</code></pre>"
    },
    "fileio_text": {
      "title": "File I/O (text)",
      "html": "<p>Open with a mode ('r','w','a'). Use <code>encoding='utf-8'</code> for text.</p><pre><code>with open('a.txt','w',encoding='utf-8') as f:\n    f.write('hi')</code></pre>"
    },
    "fileio_binary": {
      "title": "File I/O (binary)",
      "html": "<p>Use mode with <code>'b'</code> for bytes.</p><pre><code>with open('img.png','rb') as f:\n    data = f.read()</code></pre>"
    },
    "csv": {
      "title": "CSV module",
      "html": "<p>Use <code>csv.reader</code>/<code>writer</code>. newline='' on Windows to avoid blank lines.</p><pre><code>import csv\nwith open('t.csv',newline='') as f:\n    for row in csv.reader(f):\n        ...</code></pre>"
    },
    "json": {
      "title": "JSON",
      "html": "<p>Serialize with <code>json.dump</code>/<code>dumps</code>; parse with <code>json.load</code>/<code>loads</code>.</p><pre><code>import json\nwith open('data.json','w') as f:\n    json.dump({'x':1}, f)</code></pre>"
    },
    "context": {
      "title": "Context managers",
      "html": "<p><code>with</code> ensures resources close/release even on errors.</p><pre><code>with open('f.txt') as f:\n    data = f.read()</code></pre>"
    },
    "exceptions": {
      "title": "Exceptions overview",
      "html": "<p>Handle errors with <code>try/except</code>. Keep except blocks specific.</p><pre><code>try:\n    risky()\nexcept ValueError as e:\n    ...</code></pre>"
    },
    "try_except": {
      "title": "try / except / else / finally",
      "html": "<p><code>else</code> runs if no exception; <code>finally</code> runs always.</p><pre><code>try:\n    ...\nexcept OSError:\n    ...\nelse:\n    ...\nfinally:\n    ...</code></pre>"
    },
    "raise": {
      "title": "Raising exceptions",
      "html": "<p>Use <code>raise</code> to signal errors.</p><pre><code>if x < 0:\n    raise ValueError('x must be >=0')</code></pre>"
    },
    "custom_exc": {
      "title": "Custom exceptions",
      "html": "<p>Subclass an appropriate base (often <code>Exception</code>).</p><pre><code>class ConfigError(Exception): pass</code></pre>"
    },
    "assert": {
      "title": "Assertions",
      "html": "<p><code>assert cond, 'message'</code> for internal checks; may be disabled with <code>-O</code>.</p>"
    },
    "logging": {
      "title": "Logging basics",
      "html": "<p>Use the <code>logging</code> module instead of prints in libraries.</p><pre><code>import logging\nlogging.basicConfig(level=logging.INFO)\nlogging.info('step ok')</code></pre>"
    },
    "os_shutil": {
      "title": "OS & shutil",
      "html": "<p>File system utilities.</p><pre><code>import os, shutil\nos.listdir('.')\nshutil.copy('a.txt','b.txt')</code></pre>"
    },
    "pathlib": {
      "title": "pathlib Path operations",
      "html": "<p>High-level paths: join with <code>/</code>, check existence, create dirs.</p><pre><code>p = Path('data')/'file.txt'\np.exists()</code></pre>"
    }
  },
  "questions": {
    "simple": [
      { "id": "w6-s-01", "type": "mcq", "topic": "modules", "question": "A Python module is:", "options": ["A .py file", "A package manager", "A virtual environment"], "answer": "A .py file", "feedback": { "correct": "✅ A module is one .py file.", "wrong": "❌ Module ≠ package or venv." } },
      { "id": "w6-s-02", "type": "truefalse", "topic": "import", "question": "from math import sqrt imports only sqrt into the current namespace.", "answer": "True", "feedback": { "correct": "✅ Only sqrt is bound directly.", "wrong": "❌ It doesn't bind math.* names." } },
      { "id": "w6-s-03", "type": "mcq", "topic": "import", "question": "Which imports module with alias?", "options": ["import json as js", "from json import as", "import as json"], "answer": "import json as js", "feedback": { "correct": "✅ Use 'as' to alias.", "wrong": "❌ Syntax must be 'import X as Y'." } },
      { "id": "w6-s-04", "type": "truefalse", "topic": "packages", "question": "A folder can be a package without __init__.py (namespace package).", "answer": "True", "feedback": { "correct": "✅ PEP 420 allows namespace packages.", "wrong": "❌ It can be a namespace package." } },
      { "id": "w6-s-05", "type": "fill", "topic": "venv", "question": "Create a virtual env named .venv (command):", "answer": "python -m venv .venv", "feedback": { "correct": "✅ Use the venv module.", "wrong": "❌ Include '-m venv' and the directory." } },
      { "id": "w6-s-06", "type": "fill", "topic": "pip", "question": "Install 'requests' using Python's pip invocation:", "answer": "python -m pip install requests", "feedback": { "correct": "✅ Preferred pip invocation.", "wrong": "❌ Use 'python -m pip install ...'." } },
      { "id": "w6-s-07", "type": "mcq", "topic": "paths", "question": "Get just the filename from path p using pathlib:", "options": ["p.basename()", "p.name", "p.filename"], "answer": "p.name", "feedback": { "correct": "✅ Path.name returns the final component.", "wrong": "❌ basename() is os.path." } },
      { "id": "w6-s-08", "type": "truefalse", "topic": "fileio_text", "question": "To write Unicode text, pass encoding='utf-8' to open().", "answer": "True", "feedback": { "correct": "✅ Always set encoding for portability.", "wrong": "❌ Default varies; set it explicitly." } },
      { "id": "w6-s-09", "type": "fill", "topic": "fileio_text", "question": "Open 'log.txt' for appending text:", "answer": "open('log.txt','a',encoding='utf-8')", "feedback": { "correct": "✅ 'a' appends.", "wrong": "❌ Use 'a' not 'w' if you don't want to truncate." } },
      { "id": "w6-s-10", "type": "mcq", "topic": "fileio_binary", "question": "Read an image as bytes:", "options": ["open('img.png','r')", "open('img.png','rb')", "open('img.png','br')"], "answer": "open('img.png','rb')", "feedback": { "correct": "✅ 'rb' for binary read.", "wrong": "❌ Use binary mode." } },
      { "id": "w6-s-11", "type": "truefalse", "topic": "context", "question": "with automatically closes files even if an exception occurs.", "answer": "True", "feedback": { "correct": "✅ That's the point of context managers.", "wrong": "❌ 'with' guarantees exit." } },
      { "id": "w6-s-12", "type": "fill", "topic": "csv", "question": "CSV: open for reading with newline='' (exact):", "answer": "open('data.csv', newline='')", "feedback": { "correct": "✅ newline='' avoids extra blank lines.", "wrong": "❌ Include newline=''." } },
      { "id": "w6-s-13", "type": "mcq", "topic": "json", "question": "Write dict d to 'data.json':", "options": ["json.write('data.json', d)", "json.dump(d, open('data.json','w'))", "open('data.json','w').write(json.dump(d))"], "answer": "json.dump(d, open('data.json','w'))", "feedback": { "correct": "✅ json.dump(obj, fp).", "wrong": "❌ Use dump with a file object." } },
      { "id": "w6-s-14", "type": "truefalse", "topic": "exceptions", "question": "Catching Exception will also catch KeyboardInterrupt.", "answer": "False", "feedback": { "correct": "✅ KeyboardInterrupt derives from BaseException, not Exception.", "wrong": "❌ It's under BaseException." } },
      { "id": "w6-s-15", "type": "mcq", "topic": "try_except", "question": "Which clause runs only if no exception occurs?", "options": ["except", "else", "finally"], "answer": "else", "feedback": { "correct": "✅ else runs on success.", "wrong": "❌ finally runs always." } },
      { "id": "w6-s-16", "type": "fill", "topic": "raise", "question": "Raise ValueError with message 'bad':", "answer": "raise ValueError('bad')", "feedback": { "correct": "✅ raise Type('msg').", "wrong": "❌ Include parentheses and message." } },
      { "id": "w6-s-17", "type": "truefalse", "topic": "custom_exc", "question": "Custom exceptions should inherit from Exception.", "answer": "True", "feedback": { "correct": "✅ Standard practice.", "wrong": "❌ Avoid inheriting directly from BaseException." } },
      { "id": "w6-s-18", "type": "mcq", "topic": "assert", "question": "assert is best used for:", "options": ["User input validation", "Internal invariants during development", "Replacing exceptions in production"], "answer": "Internal invariants during development", "feedback": { "correct": "✅ Assertions may be disabled; use for internal checks.", "wrong": "❌ Validate user input with exceptions." } },
      { "id": "w6-s-19", "type": "fill", "topic": "logging", "question": "Basic logging at INFO level (one-liner):", "answer": "import logging; logging.basicConfig(level=logging.INFO)", "feedback": { "correct": "✅ Configure root logger.", "wrong": "❌ Include import and level." } },
      { "id": "w6-s-20", "type": "mcq", "topic": "os_shutil", "question": "Copy a file a.txt → b.txt:", "options": ["os.copy('a.txt','b.txt')", "shutil.copy('a.txt','b.txt')", "Path('a.txt').copy('b.txt')"], "answer": "shutil.copy('a.txt','b.txt')", "feedback": { "correct": "✅ shutil handles copies.", "wrong": "❌ os has no copy()." } },
      { "id": "w6-s-21", "type": "truefalse", "topic": "pathlib", "question": "Path('a')/'b' joins into a/b.", "answer": "True", "feedback": { "correct": "✅ Overloads the / operator.", "wrong": "❌ That's how pathlib joins." } },
      { "id": "w6-s-22", "type": "fill", "topic": "paths", "question": "Get directory part of Path p:", "answer": "p.parent", "feedback": { "correct": "✅ parent is the directory.", "wrong": "❌ Use p.parent." } },
      { "id": "w6-s-23", "type": "mcq", "topic": "fileio_text", "question": "Open file for reading text (default mode):", "options": ["open('f.txt')", "open('f.txt','rb')", "open('f.txt','wb')"], "answer": "open('f.txt')", "feedback": { "correct": "✅ Default is text read.", "wrong": "❌ rb/wb are binary modes." } },
      { "id": "w6-s-24", "type": "truefalse", "topic": "json", "question": "json.dumps returns a string; json.dump writes to a file-like object.", "answer": "True", "feedback": { "correct": "✅ dumps→str, dump→file.", "wrong": "❌ Remember s for string." } },
      { "id": "w6-s-25", "type": "fill", "topic": "logging", "question": "Log an error message 'boom' with logger:", "answer": "import logging; logging.error('boom')", "feedback": { "correct": "✅ Use logging.error.", "wrong": "❌ logging.print doesn't exist." } }
    ],
    "medium": [
      { "id": "w6-m-01", "type": "fill", "topic": "import", "question": "Import sqrt as rt from math (one line):", "answer": "from math import sqrt as rt", "feedback": { "correct": "✅ from ... import ... as ...", "wrong": "❌ Include alias." } },
      { "id": "w6-m-02", "type": "mcq", "topic": "packages", "question": "What does __init__.py commonly do?", "options": ["Required to run Python", "Marks a package & can expose API", "Creates a venv"], "answer": "Marks a package & can expose API", "feedback": { "correct": "✅ It can initialize package exports.", "wrong": "❌ It doesn't create venvs." } },
      { "id": "w6-m-03", "type": "fill", "topic": "venv", "question": "Activate .venv on Linux/macOS:", "answer": "source .venv/bin/activate", "feedback": { "correct": "✅ Correct activation command.", "wrong": "❌ Use source path/bin/activate." } },
      { "id": "w6-m-04", "type": "mcq", "topic": "pip", "question": "Freeze dependencies to a file:", "options": ["pip save requirements", "python -m pip freeze > requirements.txt", "pip lock > deps.txt"], "answer": "python -m pip freeze > requirements.txt", "feedback": { "correct": "✅ Common workflow.", "wrong": "❌ Use freeze." } },
      { "id": "w6-m-05", "type": "fill", "topic": "paths", "question": "Convert Path p to an absolute path string:", "answer": "str(p.resolve())", "feedback": { "correct": "✅ resolve → absolute; wrap with str.", "wrong": "❌ p.abspath() isn't pathlib API." } },
      { "id": "w6-m-06", "type": "debug", "topic": "fileio_text", "question": "Bug? with open('x.txt','w') as f: data = f.read()", "options": ["Mode should be 'r'", "Missing encoding", "Need finally"], "answer": "Mode should be 'r'", "feedback": { "correct": "✅ Can't read in write mode.", "wrong": "❌ Mode mismatch is the bug." } },
      { "id": "w6-m-07", "type": "fill", "topic": "fileio_binary", "question": "Write bytes b to 'out.bin':", "answer": "with open('out.bin','wb') as f:\n    f.write(b)", "feedback": { "correct": "✅ 'wb' to write bytes.", "wrong": "❌ Use binary mode and write()." } },
      { "id": "w6-m-08", "type": "mcq", "topic": "csv", "question": "Write CSV rows safely on Windows:", "options": ["open(...,'w')", "open(...,'w', newline='')", "open(...,'wb')"], "answer": "open(...,'w', newline='')", "feedback": { "correct": "✅ newline='' prevents extra blank lines.", "wrong": "❌ Use newline=''." } },
      { "id": "w6-m-09", "type": "fill", "topic": "json", "question": "Load JSON from string s into obj:", "answer": "json.loads(s)", "feedback": { "correct": "✅ loads parses string.", "wrong": "❌ dump/dumps are for writing." } },
      { "id": "w6-m-10", "type": "mcq", "topic": "try_except", "question": "Select the correct full structure:", "options": ["try/else/finally", "try/except/else/finally", "except/try/finally"], "answer": "try/except/else/finally", "feedback": { "correct": "✅ Full grammar.", "wrong": "❌ try must come first." } },
      { "id": "w6-m-11", "type": "fill", "topic": "raise", "question": "Re-raise the current exception inside except block:", "answer": "raise", "feedback": { "correct": "✅ Bare raise re-raises.", "wrong": "❌ Don't pass the exception again." } },
      { "id": "w6-m-12", "type": "debug", "topic": "custom_exc", "question": "What's wrong?\n\nclass MyErr: pass\nraise MyErr('bad')", "options": ["Must inherit from Exception", "Use throw not raise", "Cannot pass message"], "answer": "Must inherit from Exception", "feedback": { "correct": "✅ Exceptions must inherit Exception.", "wrong": "❌ Raise expects an Exception subclass." } },
      { "id": "w6-m-13", "type": "fill", "topic": "assert", "question": "Write assertion ensuring n >= 0 with message:", "answer": "assert n >= 0, 'n must be non-negative'", "feedback": { "correct": "✅ assert cond, 'msg'.", "wrong": "❌ Provide both condition and message." } },
      { "id": "w6-m-14", "type": "mcq", "topic": "logging", "question": "Avoid double log lines when configuring logging by:", "options": ["Calling basicConfig twice", "Configuring once at program entry", "Using print instead"], "answer": "Configuring once at program entry", "feedback": { "correct": "✅ Configure once.", "wrong": "❌ Repeated configs add handlers." } },
      { "id": "w6-m-15", "type": "fill", "topic": "os_shutil", "question": "List files in current directory with os:", "answer": "os.listdir('.')", "feedback": { "correct": "✅ os.listdir returns names.", "wrong": "❌ Provide a directory path." } }
    ],
    "hard": [
      { "id": "w6-h-01", "type": "puzzle", "topic": "json", "question": "Order lines to read JSON from file and access key 'x':", "choices": ["import json", "with open('data.json') as f:", "    obj = json.load(f)", "print(obj['x'])"], "answer": ["import json", "with open('data.json') as f:", "    obj = json.load(f)", "print(obj['x'])"], "feedback": { "correct": "✅ Import json → open → load → read key.", "wrong": "❌ Keep the sequence." } },
      { "id": "w6-h-02", "type": "debug", "topic": "context", "question": "What resource leak is possible?\n\nf = open('a.txt','r')\ndata = f.read()", "options": ["File never closed", "Double open", "Wrong encoding"], "answer": "File never closed", "feedback": { "correct": "✅ Use with to auto-close.", "wrong": "❌ The main issue is not closing." } },
      { "id": "w6-h-03", "type": "fill", "topic": "pathlib", "question": "Create directory 'data' if it doesn't exist using pathlib (one line):", "answer": "Path('data').mkdir(parents=True, exist_ok=True)", "feedback": { "correct": "✅ mkdir with flags.", "wrong": "❌ Include parents/exist_ok." } },
      { "id": "w6-h-04", "type": "mcq", "topic": "exceptions", "question": "Best practice for except blocks:", "options": ["Use bare except:", "Catch specific exceptions first", "Always catch BaseException"], "answer": "Catch specific exceptions first", "feedback": { "correct": "✅ Be specific to avoid masking bugs.", "wrong": "❌ Bare except is too broad." } },
      { "id": "w6-h-05", "type": "fill", "topic": "try_except", "question": "Structure to open file, parse int from first line, print 'bad' on ValueError, else 'ok', always close:", "answer": "try:\n    with open('n.txt') as f:\n        n = int(f.readline())\nexcept ValueError:\n    print('bad')\nelse:\n    print('ok')\nfinally:\n    pass", "feedback": { "correct": "✅ try/except/else/finally with with-open.", "wrong": "❌ Include specific ValueError and else/finally." } },
      { "id": "w6-h-06", "type": "puzzle", "topic": "custom_exc", "question": "Order lines to define and raise a custom exception:", "choices": ["class ConfigError(Exception):", "    pass", "def load():", "    raise ConfigError('missing file')"], "answer": ["class ConfigError(Exception):", "    pass", "def load():", "    raise ConfigError('missing file')"], "feedback": { "correct": "✅ Define then raise.", "wrong": "❌ Must define class first." } },
      { "id": "w6-h-07", "type": "debug", "topic": "assert", "question": "Why shouldn't asserts validate user input?", "options": ["They are too slow", "They can be disabled with -O", "They raise ValueError not AssertionError"], "answer": "They can be disabled with -O", "feedback": { "correct": "✅ Assertions may be stripped.", "wrong": "❌ Use exceptions for runtime checks." } },
      { "id": "w6-h-08", "type": "fill", "topic": "logging", "question": "Get a module-level logger named 'app' and log a warning:", "answer": "import logging\nlog = logging.getLogger('app')\nlog.warning('oops')", "feedback": { "correct": "✅ Use named loggers.", "wrong": "❌ Prefer getLogger over prints." } },
      { "id": "w6-h-09", "type": "mcq", "topic": "os_shutil", "question": "Safest way to remove a directory tree:", "options": ["os.rmdir('dir')", "shutil.rmtree('dir')", "Path('dir').unlink()"], "answer": "shutil.rmtree('dir')", "feedback": { "correct": "✅ rmtree removes recursively.", "wrong": "❌ rmdir works only if empty." } },
      { "id": "w6-h-10", "type": "fill", "topic": "paths", "question": "Get file extension '.txt' from Path p:", "answer": "p.suffix", "feedback": { "correct": "✅ suffix includes leading dot.", "wrong": "❌ Use p.suffix not extension()." } }
    ]
  }
}
